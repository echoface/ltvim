"""""""""""""""""""""""""""""Plug settings""""""""""""""""""""""""""
call plug#begin('~/.config/nvim/Plug')

source ~/.config/nvim/plugin.base

Plug 'Shougo/echodoc.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'antoinemadec/coc-fzf', {'branch': 'release'}
call plug#end()
""""""""""""""""""""""""""""""""" Plug END""""""""""""""""""""""""""

source ~/.config/nvim/vimrc.base

nmap <C-p> :Files<CR>
nmap <C-e> :Buffers<CR>
nnoremap <silent><leader>lf :Files<CR>
nnoremap <silent><leader>lb :Buffers<CR>

" >>>>>>>>>>>>>>>>>>>       coc        >>>>>>>>>>>>>>>>>>>>>>>>>
" ==                  config coc start                        ==
" ==                                                          ==
nmap <leader>rn   <Plug>(coc-rename)
nmap <leader>ac   <Plug>(coc-codeaction)
nmap <leader>fix  <Plug>(coc-fix-current)
xmap <leader>fmt  <Plug>(coc-format-selected)

" see coc.nvim/plugin/coco.vim for more mapping details
nmap <leader>gr     :<C-u>call CocActionAsync('jumpReferences')<CR>
nmap <leader>gi     :<C-u>call CocActionAsync("jumpDefinition")<CR>
nmap <leader>gd     :<C-u>call CocActionAsync('jumpDeclaration')<CR>
inoremap <C-P> <C-\><C-O>:call CocActionAsync('showSignatureHelp')<cr>
nnoremap <leader>h :call CocActionAsync('doHover')<cr>
nnoremap <leader>ch :CocCommand clangd.switchSourceHeader<CR>

let g:coc_snippet_next = '<c-j>'
let g:coc_snippet_prev = '<c-k>'

let g:echodoc_enable_at_startup = 1

inoremap <silent><expr> <leader>cc coc#refresh()

inoremap <silent><expr> <cr>
      \ pumvisible() ? coc#_select_confirm() :
      \ "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" : coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function GoHeaderSource()
  :CocCommand clangd.switchSourceHeader
endfunction

autocmd CursorHold * silent call CocActionAsync('highlight')
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
autocmd BufWritePre *.go :silent call CocAction('runCommand', 'editor.action.organizeImport')

set statusline^=%{coc#status()}

" ==                                                          ==
" ==                  config coc end                          ==
" >>>>>>>>>>>>>>>>>>>       coc        >>>>>>>>>>>>>>>>>>>>>>>>>

