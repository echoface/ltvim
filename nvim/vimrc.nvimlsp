"""""""""""""""""""""""""""""Plug settings""""""""""""""""""""""""""
call plug#begin('~/.config/nvim/Plug')
source ~/.config/nvim/plugin.base

Plug 'BurntSushi/ripgrep'
Plug 'nvim-lua/plenary.nvim'
Plug 'ray-x/lsp_signature.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }
Plug 'nvim-telescope/telescope-live-grep-raw.nvim'

" nvim build-in lsp configure
Plug 'neovim/nvim-lspconfig'

Plug 'tami5/lspsaga.nvim', {'branch': 'nvim51'} " a fork version fix bug

Plug 'honza/vim-snippets'
Plug 'dcampos/cmp-snippy'
Plug 'dcampos/nvim-snippy'

" auto complete && its source provider
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/cmp-nvim-lsp'

call plug#end()
""""""""""""""""""""""""""""""""" Plug END""""""""""""""""""""""""""

source ~/.config/nvim/vimrc.base

" nvim native lsp client, some this build-in function use Telescope
nnoremap <silent><C-p> <cmd>lua vim.lsp.diagnostic.goto_prev()<CR>
nnoremap <silent><C-n> <cmd>lua vim.lsp.diagnostic.goto_next()<CR>
nnoremap <silent><leader>rn <cmd>lua vim.lsp.buf.rename()<CR>
"nnoremap <silent><leader>gr <cmd>lua vim.lsp.buf.references()<CR>
"nnoremap <silent><leader>gd <cmd>lua vim.lsp.buf.definition()<CR>
"nnoremap <silent><leader>gs <cmd>lua vim.lsp.buf.document_symbol()<CR>
"nnoremap <silent><leader>rn <cmd>lua vim.lsp.buf.rename()<CR>
"nnoremap <silent><leader>act <cmd>lua vim.lsp.buf.code_action()<CR>
"nnoremap <silent>D <cmd>lua vim.lsp.diagnostic.show_line_diagnostics({focusable=false})
"or use this autocmd CursorHold,CursorHoldI * lua vim.lsp.diagnostic.show_line_diagnostics({focusable=false})

" lspsaga not a well maintained repo, so just deprecated most of its function
nnoremap <silent>K :Lspsaga hover_doc<CR>
nnoremap <silent>H :Lspsaga preview_definition<CR>
nnoremap <silent>D :Lspsaga show_line_diagnostics<CR>

nnoremap <leader>ft <cmd>Telescope tags<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fm <cmd>Telescope oldfiles<cr>
nnoremap <leader>gm <cmd>Telescope oldfiles<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>ff <cmd>Telescope find_files<cr>

nnoremap <leader>fr <cmd>Telescope lsp_references<cr>
nnoremap <leader>gr <cmd>Telescope lsp_references<cr>
nnoremap <leader>fd <cmd>Telescope lsp_definitions<cr>
nnoremap <leader>gd <cmd>Telescope lsp_definitions<cr>
nnoremap <leader>fs <cmd>Telescope lsp_document_symbols<cr>
nnoremap <leader>gs <cmd>Telescope lsp_document_symbols<cr>
nnoremap <leader>fws <cmd>Telescope lsp_workspace_symbols<cr>
nnoremap <leader>gws <cmd>Telescope lsp_workspace_symbols<cr>
nnoremap <leader>fe <cmd>Telescope lsp_document_diagnostics<cr>
nnoremap <leader>ge <cmd>Telescope lsp_document_diagnostics<cr>
nnoremap <leader>fwe <cmd>Telescope lsp_workspace_diagnostics<cr>
nnoremap <leader>gwe <cmd>Telescope lsp_workspace_diagnostics<cr>
nnoremap <leader>act <cmd>Telescope lsp_code_actions<cr>
vnoremap <leader>act <cmd>Telescope lsp_range_code_actions<cr>

command GitBranch             :Telescope git_branches
command ListFiles             :Telescope find_files
command ListBuffers           :Telescope buffers
command ListMRUFiles          :Telescope oldfiles

command LspRename             :lua vim.lsp.buf.rename()
command LspFormat             :lua vim.lsp.buf.formatting()
command LspCodeAction         :Telescope lsp_code_actions
command LspDiagnostics        :Telescope lsp_document_diagnostics
command LspListSymbols        :Telescope lsp_document_symbols
command LspListAllSymbols     :Telescope lsp_workspace_symbols

set completeopt=menuone,noselect
autocmd BufWritePre *.go lua vim.lsp.buf.formatting()

lua << EOF
vim.g.fzf_preview_window = {'down:+{2}-/2'}

-- setup nvm-cmp
require('telescope').load_extension('fzf')
--require("telescope").extensions.live_grep_raw.live_grep_raw()

local cmp = require "cmp"
cmp.setup {
  snippet = {
    expand = function(args)
      -- require'luasnip'.lsp_expand(args.body)
      require'snippy'.expand_snippet(args.body)
    end,
  },
  mapping = {
    ['<CR>'] = cmp.mapping.confirm({ select = true }),
    ['<Tab>'] = function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      -- elseif luasnip.expand_or_jumpable() then
      --  luasnip.expand_or_jump()
      else
        fallback()
      end
    end,
    ['<S-Tab>'] = function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      -- elseif luasnip.jumpable(-1) then
      --  luasnip.jump(-1)
      else
        fallback()
      end
    end,
  },
  sources = {
    { name = "nvim_lsp" },
    { name = "buffer" },
    { name = 'snippy' },
  },
}
cmp.setup.cmdline('/', {
  sources = {
    {
      name = 'buffer' }
    }
})
cmp.setup.cmdline(':', {
  sources = cmp.config.sources({
    { name = 'path' }
  }, {
    { name = 'cmdline' }
  })
})

require("snippy").setup({
    mappings = {
        is = {
            ["<Tab>"] = "expand_or_advance",
            ["<S-Tab>"] = "previous",
        },
        nx = {
            ["<leader>x"] = "cut_text",
        },
    },
})

require "lsp_signature".setup({
    bind = true, -- This is mandatory, otherwise border config won't get registered.
    handler_opts = {
      border = "rounded"
    }
})

vim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(vim.lsp.diagnostic.on_publish_diagnostics, {
  signs = true,
  underline = true,
  virtual_text = false, -- if true, too disputed, so close it
  update_in_insert = false,
})

-- Enable some language servers with the additional completion capabilities offered by nvim-cmp
local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
local servers = { 'clangd', 'gopls', 'pyright'}
local nvim_lsp = require('lspconfig')
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    capabilities = capabilities,
  }
end

EOF

