source $HOME/.vim/vimrc.base

"""""""""""""""""""""""""""""Plug settings""""""""""""""""""""""""""
call plug#begin('~/.vim/Plug/')
source $HOME/.vim/plugin.base
Plug 'honza/vim-snippets'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()
""""""""""""""""""""""""""""""""" Plug END""""""""""""""""""""""""""

" >>>>>>>>>>>>>>>>>>>       coc        >>>>>>>>>>>>>>>>>>>>>>>>>
" ==                  config coc start                        ==
" ==                                                          ==
nmap <leader>rn   <Plug>(coc-rename)
nmap <leader>ac   <Plug>(coc-codeaction)
nmap <leader>fix  <Plug>(coc-fix-current)
xmap <leader>fmt  <Plug>(coc-format-selected)

" see coc.nvim/plugin/coco.vim for more mapping details
nmap <leader>gr     :<C-u>call CocActionAsync('jumpReferences')<CR>
nmap <leader>gi     :<C-u>call CocActionAsync("jumpDefinition")<CR>
nmap <leader>gd     :<C-u>call CocActionAsync('jumpDeclaration')<CR>

"list diagnostic
nmap <leader>ld :CocDiagnostics<CR>
nnoremap <leader>ch :CocCommand clangd.switchSourceHeader<CR>

let g:coc_snippet_next = '<c-j>'
let g:coc_snippet_prev = '<c-k>'

inoremap <silent><expr> <leader>cc coc#refresh()

inoremap <silent><expr> <cr>
      \ pumvisible() ? coc#_select_confirm() :
      \ "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" : coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function GoHeaderSource()
  :CocCommand clangd.switchSourceHeader
endfunction

if has('nvim-0.4.3') || has('patch-8.2.0750')
  nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
endif

autocmd CursorHold * silent call CocActionAsync('highlight')
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif


set statusline^=%{coc#status()}
" ==                                                          ==
" ==                  config coc end                          ==
" >>>>>>>>>>>>>>>>>>>       coc        >>>>>>>>>>>>>>>>>>>>>>>>>

